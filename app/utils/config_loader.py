"""
config_loader.py

Location: /app/utils/config_loader.py

This utility is introduced because main.py imports load_config from this path.
It belongs here based on AeroLearn AI's project structure (see code_summary.md).
Extend as needed to support additional config formats.

Functions:
    - load_config(config_path=None): Loads config from JSON or Python files.

Author: (auto-generated by AeroLearn AI assistant)
"""

import os
import json
import importlib.util
from typing import Dict, Any, Optional

def load_config(config_path: Optional[str] = None) -> Dict[str, Any]:
    """
    Loads application configuration from the specified file, or from a default config file.
    Supports JSON (*.json) and Python module (*.py) files.
    
    Args:
        config_path: The path to the config file. If None, defaults to './config.json'
                     in the application root directory.

    Returns:
        A dict containing configuration parameters.

    Raises:
        FileNotFoundError: If the config file doesn't exist.
        ValueError: If the config format or loading fails.
    """
    if config_path is None:
        # Default: Expect 'config.json' in project root
        default_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "config.json")
        config_path = default_path
    if not os.path.isfile(config_path):
        raise FileNotFoundError(
            f"Config file '{config_path}' not found. "
            f"Place a valid config.json or config.py in the app root directory or specify config_path."
        )

    ext = os.path.splitext(config_path)[-1].lower()
    if ext == ".json":
        with open(config_path, "r", encoding="utf-8") as f:
            return json.load(f)
    elif ext == ".py":
        # Import as a module and extract a CONFIG or config dict
        spec = importlib.util.spec_from_file_location("confmod", config_path)
        confmod = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(confmod)
        if hasattr(confmod, "CONFIG"):
            return dict(confmod.CONFIG)
        elif hasattr(confmod, "config"):
            return dict(confmod.config)
        else:
            # Collect all UPPERCASE keys as config
            return {k: v for k, v in confmod.__dict__.items() if k.isupper()}
    else:
        raise ValueError("Unsupported config file type: %s" % ext)

# --- File Placement Note ---
# Save this file as: /app/utils/config_loader.py
# This conforms with AeroLearn AI project structure for utility modules.
